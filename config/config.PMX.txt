
//--------------------------//
//         Général          //
//--------------------------//

// Version du fichier ce configuration (date, mois, jour, puis révision entre 01 et 99)
// Exemple : 2013030801 : révision 01 le 08/03/2013
configVersion = 2018040901

//----------------------------------//
//  Configuration des branchements  //
//----------------------------------//

// Pin pour le codeur (direct) gauche, channel A
pinCodeurGchA = 22
// Pin pour le codeur (direct) gauche, channel B
pinCodeurGchB = 21

// Pin pour le codeur (direct) droit, channel A
pinCodeurDchA = 17
// Pin pour le codeur (direct) droit, channel B
pinCodeurDchB = 18

//--------------------------//
//     Modes de réglage     //
//--------------------------//

//Période de l'asservissement en sec : T=1/f
asservPeriod = 0.002

// Désactivation du command manager (le robot n'est plus asservi mais l'odométrie est toujours active)
disableAsserv = false

// Réglage des codeurs (on affiche simplement les valeurs des codeurs et on desactive le calcul odometrique)
reglageCodeurs = false

// Désactiver la QuadRampDérivée en distance
disableDistanceQuad = false

// Désactiver la QuadRampDérivée en angle
disableAngleQuad = false

// Désactiver le régulateur de distance
disableDistanceRegu = false

// Désactiver le régulateur d'angle
disableAngleRegu = false

//--------------------------//
//       CommandManager     //
//--------------------------//

// Fenêtre de l'angle dans lequel on considère que le GoTo peut commencer à avancer
angleThreshold = 0.3

// Distance en dessous de laquelle on revient en marche arriere si on dépasse, sinon demi-tour
returnThreshold = 20

// Distance au point de consigne à partir de laquelle on va essayer d'enchainer la consigne suivante
enchainThreshold = 2000000

//--------------------------//
//        Odométrie         //
//--------------------------//

// Distance entre le point asservit (centre des deux roues) et l'arrière du robot pour mettre le (0,0) au coin de la table
placementOrigineX = 0
placementOrigineY = 0

// Nombre de tics codeurs en 1m pour codeur gauche
// !!! ATTENTION : redémarrer l'asserv pour prendre en compte les changements !!
frontParMetreCodeurG = 20830.0

// Nombre de tics codeurs en 1m pour codeur droite
// !!! ATTENTION : redémarrer l'asserv pour prendre en compte les changements !!
frontParMetreCodeurD = 20830.0

// Distance entre les roues codeuses en mm
// !!! ATTENTION : redémarrer l'asserv pour prendre en compte les changements !!
distRoues = 258

// Nombre d'UO pour un tic de codeur
// !!! ATTENTION : redémarrer l'asserv pour prendre en compte les changements !!
uOParFront = 2048

// Inversion du sens du codeur gauche
inverseCodeurG = false

// Inversion du sens du codeur droit
inverseCodeurD = false

// Échange des codeurs
swapCodeurs = false

//--------------------------//
//         Moteurs          //
//--------------------------//

// Vitesse maximum en sens positif (MD22 : 1 à 127)
V_MAX_POS_MOTOR = 127

// Vitesse maximum en sens négatif (MD22 : 1 à 127)
V_MAX_NEG_MOTOR = -128


// Vitesses à partir desquelles le robot commence à bouger, pour ne pas
// envoyer de jus dans des moteurs qui ne tournent pas

// MD22 : 1 a 127
V_MIN_POS_MOTOR = 1

// MD22 : -1 a -128
V_MIN_NEG_MOTOR = -1

// Inversion du sens du moteur gauche
inverseMoteurG = true

// Inversion du sens du moteur droit
inverseMoteurD = true

// Échange des moteurs
swapMoteurs = true


//--------------------------//
//           PID            //
//--------------------------//


// PID en distance


// Coeff proportionelle
DIST_KP = 20

// Coeff intégrale
DIST_KI = 0

// Coeff dérivée
DIST_KD = 500

// Coeff permettant de diminuer les valeurs du PID
DIST_OUT_RATIO = 0.000001

// Valeur de sortie maximum pour le moteur
DIST_MAX_OUTPUT = 125

// Valeur maximum de l'intégrale (0 = filtre PD)
DIST_MAX_INTEGRAL = 0


// PID en angle


// Coeff proportionelle
ANGLE_KP = 40

// Coeff intégrale
ANGLE_KI = 0

// Coeff dérivée
ANGLE_KD = 300

// Coeff permettant de diminuer les valeurs du PID
ANGLE_OUT_RATIO = 0.0000001

// Valeur de sortie maximum pour le moteur
ANGLE_MAX_OUTPUT = 125

// Valeur maximum de l'intégrale (0 = filtre PD)
ANGLE_MAX_INTEGRAL = 0


// QUADRAMPDerivee (distance)

// Vitesse max en marche avant
DIST_QUAD_1ST_POS = 3200000

// Vitesse max en marche arrière
DIST_QUAD_1ST_NEG = 3000000

// Accélération max en marche avant
DIST_QUAD_AV_2ND_ACC = 8000

// Décélération max en marche avant
DIST_QUAD_AV_2ND_DEC = 5000

// Coeff déterminant le début de la rampe de décélération en marche avant
DIST_QUAD_AV_ANTICIPATION_GAIN_COEF = 270

// Accélération max en marche arrière
DIST_QUAD_AR_2ND_ACC = 8000

// Décélération max en marche arrière
DIST_QUAD_AR_2ND_DEC = 5000

// Coeff déterminant le début de la rampe de décélération en marche arrière
DIST_QUAD_AR_ANTICIPATION_GAIN_COEF = 270

// Largeur de la zone où l'on considère être arrivé (UO)
DIST_TAILLE_FENETRE_ARRIVEE = 200000

// Diviseur pour la vitesse faible en marche avant
DIST_QUAD_AV_LOW_DIV = 0

// Diviseur pour la vitesse faible en marche arrière
DIST_QUAD_AR_LOW_DIV = 0

// QUADRAMPDerivee (angle)


// Vitesse max en rotation
ANGLE_QUAD_1ST_POS = 6400000

// Accélération max en rotation
ANGLE_QUAD_2ND_ACC = 20000

// Décélération max en rotation
ANGLE_QUAD_2ND_DEC = 12000

// Coeff déterminant le début de la rampe de décélération en rotation
ANGLE_QUAD_ANTICIPATION_GAIN_COEF = 270

// Largeur de la zone où l'on considère être arrivé (UO)
ANGLE_TAILLE_FENETRE_ARRIVEE = 200000


//--------------------------//
//   Detection de blocage   //
//--------------------------//

// Seuil de détection du blocage pour la distance (en UO/tick)
BLOCK_DIST_SPEED_THRESHOLD = 1024

// Seuil de détection du blocage pour l'angle (en UO/tick)
BLOCK_ANGLE_SPEED_THRESHOLD = 1024

// Si on ne bouge pas pendant ce nombre de tick, on signale l'info
BLOCK_TICK_THRESHOLD = 500

